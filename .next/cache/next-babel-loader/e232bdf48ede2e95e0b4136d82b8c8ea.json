{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//import Link from \"next/link\";\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastListWithClick from '../components/PodcastListWithClick';\nimport Error from './_error';\nimport PodcastPlayer from '../components/PodcastPlayer';\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"openPodcast\", (event, podcast) => {\n      event.preventDefault();\n      this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    this.state = {\n      openPodcast: null\n    };\n  }\n\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    let idChannel = query.id;\n\n    try {\n      let [reqChannel, reqSeries, reqAudio] = await Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)]);\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return {\n          canal: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      } //let reqChannel = await fetch(`https://api.audioboom.com/channels/${idChannel}`);\n\n\n      let dataChannel = await reqChannel.json();\n      let canal = dataChannel.body.channel; //let reqAudio = await fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`);\n\n      let dataAudios = await reqAudio.json();\n      let audioClips = dataAudios.body.audio_clips; //let reqSeries = await fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`);\n\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return {\n        canal,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        canal: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      canal,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n    const {\n      openPodcast\n    } = this.state;\n\n    if (statusCode !== 200) {\n      return __jsx(Error, {\n        statusCode: statusCode\n      });\n    }\n\n    return __jsx(Layout, {\n      title: canal.title\n    }, openPodcast && __jsx(\"div\", {\n      className: \"jsx-1404733386\"\n    }, \"Hay un podcast abierto\"), __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${canal.urls.banner_image.original})`\n      },\n      className: \"jsx-1404733386\" + \" \" + \"banner\"\n    }), __jsx(\"h1\", {\n      className: \"jsx-1404733386\"\n    }, canal.title), series.length > 0 && __jsx(\"div\", {\n      className: \"jsx-1404733386\"\n    }, __jsx(\"h2\", {\n      className: \"jsx-1404733386\"\n    }, \"Series\"), __jsx(ChannelGrid, {\n      channels: series\n    })), __jsx(\"h2\", {\n      className: \"jsx-1404733386\"\n    }, \"Ultimos Podcasts\"), __jsx(PodcastListWithClick, {\n      podcasts: audioClips,\n      onClickPodcast: this.openPodcast\n    }), __jsx(_JSXStyle, {\n      id: \"1404733386\"\n    }, \".banner.jsx-1404733386{width:100%;padding-bottom:25%;background-position:50% 50%;background-size:cover;background-color:#aaa;}h1.jsx-1404733386{font-weight:600;padding:15px;}h2.jsx-1404733386{padding:15px;font-size:1.2em;font-weight:600;margin:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQW5kcsOpc1xcRGVza3RvcFxcYXBsaWNhY2lvbmVzXFxwbGF0emlcXHJlYWN0LmpzXFxwb2RjYXN0XFxwYWdlc1xcY2hhbm5lbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnR2tCLEFBR3NCLEFBT0ssQUFJSCxXQVZNLEVBV0gsR0FKSCxhQUNmLEFBSWtCLENBWFksZUFZbkIsU0FDWCxJQVp3QixzQkFDQSxzQkFDeEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxBbmRyw6lzXFxEZXNrdG9wXFxhcGxpY2FjaW9uZXNcXHBsYXR6aVxccmVhY3QuanNcXHBvZGNhc3RcXHBhZ2VzXFxjaGFubmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XHJcblxyXG5pbXBvcnQgJ2lzb21vcnBoaWMtZmV0Y2gnO1xyXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvTGF5b3V0JztcclxuaW1wb3J0IENoYW5uZWxHcmlkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhbm5lbEdyaWQnO1xyXG5pbXBvcnQgUG9kY2FzdExpc3RXaXRoQ2xpY2sgZnJvbSAnLi4vY29tcG9uZW50cy9Qb2RjYXN0TGlzdFdpdGhDbGljayc7XHJcbmltcG9ydCBFcnJvciBmcm9tICcuL19lcnJvcic7XHJcbmltcG9ydCBQb2RjYXN0UGxheWVyIGZyb20gJy4uL2NvbXBvbmVudHMvUG9kY2FzdFBsYXllcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7IG9wZW5Qb2RjYXN0OiBudWxsfVxyXG4gICAgfVxyXG5cclxuc3RhdGljIGFzeW5jIGdldEluaXRpYWxQcm9wcyh7cXVlcnksIHJlc30pe1xyXG4gICAgbGV0IGlkQ2hhbm5lbCA9IHF1ZXJ5LmlkO1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIGxldCBbcmVxQ2hhbm5lbCwgcmVxU2VyaWVzLCByZXFBdWRpb10gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfWApLFxyXG4gICAgICAgICAgICBmZXRjaChgaHR0cHM6Ly9hcGkuYXVkaW9ib29tLmNvbS9jaGFubmVscy8ke2lkQ2hhbm5lbH0vY2hpbGRfY2hhbm5lbHNgKSxcclxuICAgICAgICAgICAgZmV0Y2goYGh0dHBzOi8vYXBpLmF1ZGlvYm9vbS5jb20vY2hhbm5lbHMvJHtpZENoYW5uZWx9L2F1ZGlvX2NsaXBzYClcclxuICAgICAgICBdKVxyXG4gICAgXHJcblxyXG4gICAgICAgIGlmIChyZXFDaGFubmVsLnN0YXR1cyA+PSA0MDApIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSByZXFDaGFubmVsLnN0YXR1cztcclxuICAgICAgICAgICAgcmV0dXJuIHtjYW5hbDogbnVsbCwgYXVkaW9DbGlwczogbnVsbCwgc2VyaWVzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVxQ2hhbm5lbC5zdGF0dXN9XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgLy9sZXQgcmVxQ2hhbm5lbCA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfWApO1xyXG4gICAgICAgIGxldCBkYXRhQ2hhbm5lbCA9ICBhd2FpdCByZXFDaGFubmVsLmpzb24oKTtcclxuICAgICAgICBsZXQgY2FuYWwgPSBkYXRhQ2hhbm5lbC5ib2R5LmNoYW5uZWw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICBcclxuICAgICAgICAvL2xldCByZXFBdWRpbyA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfS9hdWRpb19jbGlwc2ApO1xyXG4gICAgICAgIGxldCBkYXRhQXVkaW9zID0gYXdhaXQgcmVxQXVkaW8uanNvbigpO1xyXG4gICAgICAgIGxldCBhdWRpb0NsaXBzID0gZGF0YUF1ZGlvcy5ib2R5LmF1ZGlvX2NsaXBzO1xyXG4gICAgXHJcbiAgICAgICAgLy9sZXQgcmVxU2VyaWVzID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLmF1ZGlvYm9vbS5jb20vY2hhbm5lbHMvJHtpZENoYW5uZWx9L2NoaWxkX2NoYW5uZWxzYCk7XHJcbiAgICAgICAgbGV0IGRhdGFTZXJpZXMgPSBhd2FpdCByZXFTZXJpZXMuanNvbigpO1xyXG4gICAgICAgIGxldCBzZXJpZXMgPSBkYXRhU2VyaWVzLmJvZHkuY2hhbm5lbHM7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4ge2NhbmFsLCBhdWRpb0NsaXBzLCBzZXJpZXMsIHN0YXR1c0NvZGU6IDIwMH1cclxuICAgICAgICBcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4ge2NhbmFsOiBudWxsLCBhdWRpb0NsaXBzOiBudWxsLCBzZXJpZXM6IG51bGwsXHJcbiAgICAgICAgc3RhdHVzQ29kZTogNTAzfVxyXG4gICAgfVxyXG5cclxuICAgIFxyXG59XHJcblxyXG4gICAgb3BlblBvZGNhc3QgPSAoZXZlbnQsIHBvZGNhc3QpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBvcGVuUG9kY2FzdDogcG9kY2FzdFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCl7XHJcbiAgICAgICAgY29uc3QgeyBjYW5hbCwgYXVkaW9DbGlwcywgc2VyaWVzLCBzdGF0dXNDb2RlfT0gdGhpcy5wcm9wcztcclxuICAgICAgICBjb25zdCB7IG9wZW5Qb2RjYXN0IH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgICAgICBpZiAoIHN0YXR1c0NvZGUgIT09IDIwMCApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDxFcnJvciBzdGF0dXNDb2RlPXtzdGF0dXNDb2RlfSAvPlxyXG4gICAgICAgIH1cclxuICAgICAgXHJcblxyXG4gICAgICByZXR1cm4gPExheW91dCB0aXRsZT17Y2FuYWwudGl0bGV9PlxyXG5cclxuICAgICAgeyBvcGVuUG9kY2FzdCAmJiBcclxuICAgICAgPGRpdj5IYXkgdW4gcG9kY2FzdCBhYmllcnRvPC9kaXY+XHJcbiAgICAgICAgXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmFubmVyXCIgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7Y2FuYWwudXJscy5iYW5uZXJfaW1hZ2Uub3JpZ2luYWx9KWAgfX0gLz5cclxuICAgICAgXHJcbiAgICAgIDxoMT57IGNhbmFsLnRpdGxlIH08L2gxPlxyXG5cclxuICAgICAgeyBzZXJpZXMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8aDI+U2VyaWVzPC9oMj5cclxuICAgICAgICAgIDxDaGFubmVsR3JpZCBjaGFubmVscz17IHNlcmllcyB9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIDxoMj5VbHRpbW9zIFBvZGNhc3RzPC9oMj5cclxuICAgICAgPFBvZGNhc3RMaXN0V2l0aENsaWNrIHBvZGNhc3RzPXsgYXVkaW9DbGlwcyB9IG9uQ2xpY2tQb2RjYXN0PXsgdGhpcy5vcGVuUG9kY2FzdCB9IC8+XHJcblxyXG4gICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgLmJhbm5lciB7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyNSU7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCUgNTAlO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNhYWE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGgxIHtcclxuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBoMiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcclxuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICBgfTwvc3R5bGU+XHJcbiAgICA8L0xheW91dD5cclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgIH1cclxufSJdfQ== */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\Andr\\xE9s\\\\\\\\Desktop\\\\\\\\aplicaciones\\\\\\\\platzi\\\\\\\\react.js\\\\\\\\podcast\\\\\\\\pages\\\\\\\\channel.js */\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Andr√©s/Desktop/aplicaciones/platzi/react.js/podcast/pages/channel.js"],"names":["Layout","ChannelGrid","PodcastListWithClick","Error","PodcastPlayer","React","Component","constructor","props","event","podcast","preventDefault","setState","openPodcast","state","getInitialProps","query","res","idChannel","id","reqChannel","reqSeries","reqAudio","Promise","all","fetch","status","statusCode","canal","audioClips","series","dataChannel","json","body","channel","dataAudios","audio_clips","dataSeries","channels","e","render","title","backgroundImage","urls","banner_image","original","length"],"mappings":"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","sourcesContent":["//import Link from \"next/link\";\r\n\r\nimport 'isomorphic-fetch';\r\nimport Layout from '../components/Layout';\r\nimport ChannelGrid from '../components/ChannelGrid';\r\nimport PodcastListWithClick from '../components/PodcastListWithClick';\r\nimport Error from './_error';\r\nimport PodcastPlayer from '../components/PodcastPlayer';\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { openPodcast: null}\r\n    }\r\n\r\nstatic async getInitialProps({query, res}){\r\n    let idChannel = query.id;\r\n\r\n    try {\r\n\r\n        let [reqChannel, reqSeries, reqAudio] = await Promise.all([\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}`),\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\r\n        ])\r\n    \r\n\r\n        if (reqChannel.status >= 400) {\r\n            res.statusCode = reqChannel.status;\r\n            return {canal: null, audioClips: null, series: null,\r\n                statusCode: reqChannel.status}\r\n        }\r\n    \r\n        //let reqChannel = await fetch(`https://api.audioboom.com/channels/${idChannel}`);\r\n        let dataChannel =  await reqChannel.json();\r\n        let canal = dataChannel.body.channel;\r\n        \r\n        \r\n    \r\n        //let reqAudio = await fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`);\r\n        let dataAudios = await reqAudio.json();\r\n        let audioClips = dataAudios.body.audio_clips;\r\n    \r\n        //let reqSeries = await fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`);\r\n        let dataSeries = await reqSeries.json();\r\n        let series = dataSeries.body.channels;\r\n    \r\n        return {canal, audioClips, series, statusCode: 200}\r\n        \r\n    } catch (e) {\r\n        return {canal: null, audioClips: null, series: null,\r\n        statusCode: 503}\r\n    }\r\n\r\n    \r\n}\r\n\r\n    openPodcast = (event, podcast) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openPodcast: podcast\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n        const { canal, audioClips, series, statusCode}= this.props;\r\n        const { openPodcast } = this.state;\r\n\r\n        if ( statusCode !== 200 ) {\r\n            return <Error statusCode={statusCode} />\r\n        }\r\n      \r\n\r\n      return <Layout title={canal.title}>\r\n\r\n      { openPodcast && \r\n      <div>Hay un podcast abierto</div>\r\n        \r\n      }\r\n\r\n      <div className=\"banner\" style={{ backgroundImage: `url(${canal.urls.banner_image.original})` }} />\r\n      \r\n      <h1>{ canal.title }</h1>\r\n\r\n      { series.length > 0 &&\r\n        <div>\r\n          <h2>Series</h2>\r\n          <ChannelGrid channels={ series } />\r\n        </div>\r\n      }\r\n\r\n      <h2>Ultimos Podcasts</h2>\r\n      <PodcastListWithClick podcasts={ audioClips } onClickPodcast={ this.openPodcast } />\r\n\r\n      <style jsx>{`\r\n        .banner {\r\n          width: 100%;\r\n          padding-bottom: 25%;\r\n          background-position: 50% 50%;\r\n          background-size: cover;\r\n          background-color: #aaa;\r\n        }\r\n        h1 {\r\n          font-weight: 600;\r\n          padding: 15px;\r\n        }\r\n        h2 {\r\n          padding: 15px;\r\n          font-size: 1.2em;\r\n          font-weight: 600;\r\n          margin: 0;\r\n        }\r\n      `}</style>\r\n    </Layout>\r\n                \r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}